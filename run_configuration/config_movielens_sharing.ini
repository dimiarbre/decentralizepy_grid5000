[DATASET]
dataset_package = decentralizepy.datasets.MovieLens
dataset_class = MovieLens
model_class = MatrixFactorization
train_dir = /datasets/MovieLens
test_dir = /datasets/MovieLens
; python list of fractions below
sizes =

[OPTIMIZER_PARAMS]
optimizer_package = torch.optim
optimizer_class = SGD
lr = 0.075

[NODE]
graph_degree = 4

[TRAIN_PARAMS]
training_package = decentralizepy.training.Training
training_class = Training
rounds = 1
full_epochs = True
batch_size = 32
shuffle = True
loss_package = torch.nn
loss_class = MSELoss



[SHARING]
sharing_package = decentralizepy.sharing.SharingAsymmetric
sharing_class = SharingAsymmetric
save_models_for_attacks = 100
save_all_models=False
nb_models_to_save=10

[COMMUNICATION]
comm_package = decentralizepy.communication.TCP
comm_class = TCP
addresses_filepath = /ip.json