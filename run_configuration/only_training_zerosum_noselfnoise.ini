[DATASET]
dataset_package = decentralizepy.datasets.CIFAR10
dataset_class = CIFAR10
model_class = LeNet
train_dir = /datasets/CIFAR
test_dir = /datasets/CIFAR
; python list of fractions below
sizes = 
random_seed = 90
partition_niid = kshard
shards = 2

[OPTIMIZER_PARAMS]
optimizer_package = torch.optim
optimizer_class = SGD
lr = 0.05

[TRAIN_PARAMS]
training_package = decentralizepy.training.Training
training_class = Training

rounds = 3
full_epochs = False
batch_size = 32
shuffle = True
loss_package = torch.nn
loss_class = CrossEntropyLoss


[NODE]
graph_degree = 6

[SHARING]
sharing_package = decentralizepy.sharing.ZeroSumSharing
sharing_class = ZeroSumSharing
save_models_for_attacks = 500
self_noise=False
; gradient norm mean usually = 0.225
; noise_std=0

; gradient norm mean/2
; noise_std=0.1125

; gradient norm mean/4
; noise_std=0.05625

; gradient norm mean/8
; noise_std=0.028125 

; gradient norm mean/16
noise_std=0.0140625 

; gradient norm mean/32
; noise_std=0.00703125 

; gradient norm mean/64
; noise_std=0.003515625

# This section must be at the end since the script may add an offset to it
[COMMUNICATION]
comm_package = decentralizepy.communication.TCP
comm_class = TCP
addresses_filepath = /ip.json
