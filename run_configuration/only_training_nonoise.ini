[DATASET]
dataset_package = decentralizepy.datasets.CIFAR10
dataset_class = CIFAR10
model_class = LeNet
train_dir = /datasets/CIFAR
test_dir = /datasets/CIFAR
; python list of fractions below
sizes = 
random_seed = 90
partition_niid = True
shards = 2

[OPTIMIZER_PARAMS]
optimizer_package = torch.optim
optimizer_class = SGD
lr = 0.01

[TRAIN_PARAMS]
training_package = decentralizepy.training.Training
training_class = Training

rounds = 3
full_epochs = False
batch_size = 8
shuffle = True
loss_package = torch.nn
loss_class = CrossEntropyLoss


[SHARING]
sharing_package = decentralizepy.sharing.SharingAsymmetric
sharing_class = SharingAsymmetric
# noise_std=0
# mia_attack = False
# gradient_inversion_attack = False
# lr = 0.01
# dataset_stats = [[0.5,0.5,0.5], [0.5,0.5,0.5]]
# frequency_of_attack = -1

# This section must be at the end since the script may add an offset to it
[COMMUNICATION]
comm_package = decentralizepy.communication.TCP
comm_class = TCP
addresses_filepath = /ip.json
